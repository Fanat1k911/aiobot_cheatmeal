import asyncio
import datetime
import logging
import os
from pprint import pprint

from aiogram import Dispatcher, types, F, Bot
from aiogram.filters import CommandStart
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage

from aiobot_cheatmeal.bot.settings import config
from aiobot_cheatmeal.bot.keyboards import keyboards
from aiobot_cheatmeal.bot.utils.make_report import Location

logging.basicConfig(level=logging.INFO)
dp = Dispatcher()
bot = Bot(token=config.TOKEN_API, parse_mode='HTML')

time_now = datetime.datetime.now().strftime('%H:%M')
today_now = datetime.datetime.date(datetime.datetime.now()).strftime('%d.%m.%Y')
data_day = [[f'–û—Ç—á—ë—Ç –∑–∞ {today_now}'],
            ['–û–ë–©–ê–Ø –í–´–†–£–ß–ö–ê:'],
            ['–ò–¢–û–ì–û –ù–ê–õ–ò–ß–ù–´–•:'],

            ['–ö–£–ü–û–õ'],
            ['–ù–∞–ª–∏—á–Ω—ã–µ:'],
            ['–ë/–ù:'],
            ['–ò—Ç–æ–≥–æ:'],
            ['–ß–µ–∫–æ–≤:'],
            ['–°—Ä. –ß–µ–∫:'],

            ['–ò—Ç–æ–≥ –ø–æ —Å–º–µ–Ω–µ:'],

            ['–ö–∞—Å—Å–æ–≤–∞—è —Å–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞ –±–µ–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π;'],
            ['–†–∞–∑–º–µ–Ω –µ—Å—Ç—å;'],
            ['–ó–∞–ª —É–±—Ä–∞–Ω;'],
            ['–¢–µ–ª–µ—Ñ–æ–Ω –Ω–∞ –∑–∞—Ä—è–¥–∫—É –ø–æ—Å—Ç–∞–≤–ª–µ–Ω;'],
            ['–ú–µ–Ω–∞–∂–Ω–∏—Ü—ã –Ω–∞–ø–æ–ª–Ω–µ–Ω—ã;'],
            ['–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π –Ω–µ –±—ã–ª–æ;'],
            ['–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.']]
Poolbar, Window, Curds, report = {}, {}, {}, {}
result_report = MemoryStorage()
result = {}


@dp.message(CommandStart())
async def cmd_start(msg: Message) -> None:
    await msg.answer(f'<b>–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name.capitalize()}</b> üëã')


@dp.message(Command('reports', 'Reports'))
async def command_vision(msg: Message, state: FSMContext):
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –ø—Ä–æ–¥–∞–∂:', reply_markup=keyboards.inline_area_kb)
    await state.set_state(Location.choose_location)


@dp.message(Location.choose_location)
@dp.callback_query(F.data == 'poolbar_area')
async def to_poolbar(callback: CallbackQuery, state: FSMContext):
    await state.update_data(Poolbar='poolbar_area')
    await callback.answer('–í—ã–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è <–ü–£–õ–ë–ê–†>')
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ë–ï–ó–ù–ê–õ–ò–ß–ù–´–• –æ–ø–ª–∞—Ç:")
    await state.set_state(Location.poolbar_choosed)


@dp.message(Location.poolbar_choosed)
@dp.callback_query(F.data == 'poolbar_area')
async def poolbar_info(msg: Message, state: FSMContext):
    print('–í—Å–µ –∏–¥–µ—Ç –ø–æ –ø–ª–∞–Ω—É, —â–∞—Å –±—É–¥–µ–º –≤–≤–æ–¥–∏—Ç—å —Å—É–º–º—ã')
    if msg.text.isdigit():
        Poolbar['–û—Ç—á—ë—Ç –∑–∞:'] = today_now
        Poolbar['–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ'] = msg.text
        # pbar.storage.update(Poolbar)
        print('Poolbar items >>>', Poolbar.items())
        await state.set_state(Location.cash)
        await msg.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ù–ê–õ–ò–ß–ù–´–• –æ–ø–ª–∞—Ç:')
    else:
        await msg.reply('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏–π')


@dp.message(Location.cash)
@dp.callback_query(F.data == 'poolbar_area')
async def poolbar_to_cash(msg: Message, state: FSMContext):
    if msg.text.isdigit():
        Poolbar['–ù–∞–ª–∏—á–Ω—ã–µ'] = msg.text

        await result_report.update_data('Poolbar', Poolbar)
        result.update(Poolbar)

        await state.set_state(Location.any_report)
        await msg.answer(f'Good! –ë—ã–ª–∏ –ª–∏ –¥—Ä—É–≥–∏–µ –ª–æ–∫–∞—Ü–∏–∏ —Å –ø—Ä–∏–±—ã–ª—å—é?',
                         reply_markup=keyboards.yes_or_no_kb)
    else:
        await msg.reply('–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏–π')


@dp.message(Location.any_report, F.text == '–î–ê')
async def go_more_report(msg: Message, state: FSMContext):
    print('–≠–¢–û –ë–´–õ–û "–î–ê"!', msg.text)
    await state.set_state(Location.choose_location)
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –ø—Ä–æ–¥–∞–∂:', reply_markup=keyboards.inline_area_kb)


@dp.message(Location.any_report, F.text == '–ù–ï–¢')
async def go_more_report(msg: Message, state: FSMContext):
    await state.set_state(Location.wastes)
    print('–î—Ä—É–≥–∏—Ö –ª–æ–∫–∞—Ü–∏–π —Å –ø—Ä–∏–±—ã–ª—å—é –Ω–µ –±—ã–ª–æ')
    await msg.answer('–•–æ—Ä–æ—à–æ! –°–µ–≥–æ–¥–Ω—è –±—ã–ª–∏ —Ç—Ä–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã—Ö?', reply_markup=keyboards.yes_or_no_kb)


@dp.message(Location.wastes, F.text == '–î–ê')
async def go_wastes(msg: Message, state: FSMContext):
    await state.set_state(Location.category_choosed)
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞—Ç', reply_markup=keyboards.category_kb)

    print('result_report >>>', result_report.storage.items())
    print('result >>>', result.items())
    print(keyboards.inline_area_kb.model_dump()['inline_keyboard'][0][0][
              'callback_data'])  # TODO: –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–æ–ø–∫–µ –ø–æ–ª—É—á–∏–ª–∏, —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –µ–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
    # for key, value in keyboards.inline_area_kb.dict().items():
    #     print(key, value)
    #     print()


# @dp.callback_query(F.data == 'Connection')
# async def fill_wastes(msg: Message, state: FSMContext):
#     print('–ü—Ä–∏—à–ª–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –¥–æ–ø–æ–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–∞—Ç')


# TODO: —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∫–∞–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –¥—Ä—É–≥–æ–µ
# TODO: –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–±–∏—Ç—å –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ–¥–∞


async def main():
    await dp.start_polling(bot)
    await bot.delete_webhook(drop_pending_updates=True)
    # dp.include_routers(choose_loc.router)


if __name__ == '__main__':
    asyncio.run(main())

# C:\Users\HomeMachine\Desktop\ngrok.exe http 8080
# Emoji : win+.
# botID = 6373698793
# from aiogram.enums.dice_emoji import DiceEmoji  - –∫–ª–∞—Å—Å —ç–º–æ–¥–∂–∏ –∏–≥—Ä–æ–≤–∞—è –≥—Ä—É–ø–ø–∞
