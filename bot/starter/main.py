import asyncio
import datetime
import logging
import os

import dotenv
from aiogram import Dispatcher, types, F, Bot
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from bot.settings import config

from bot.keyboards import keyboards
from bot.utils.make_report import Location

logging.basicConfig(level=logging.INFO)
dp = Dispatcher()
bot = Bot(token=config.TOKEN_API, parse_mode = 'HTML')

time_now = datetime.datetime.now().strftime('%H:%M')
today_now = datetime.datetime.date(datetime.datetime.now()).strftime('%d.%m.%Y')
data_day = [[f'–û—Ç—á—ë—Ç –∑–∞ {today_now}'],
['–û–ë–©–ê–Ø –í–´–†–£–ß–ö–ê:'],
['–ò–¢–û–ì–û –ù–ê–õ–ò–ß–ù–´–•:'],

['–ö–£–ü–û–õ'],
['–ù–∞–ª–∏—á–Ω—ã–µ:'],
['–ë/–ù:'],
['–ò—Ç–æ–≥–æ:'],
['–ß–µ–∫–æ–≤:'],
['–°—Ä. –ß–µ–∫:'],

['–ò—Ç–æ–≥ –ø–æ —Å–º–µ–Ω–µ:'],

['–ö–∞—Å—Å–æ–≤–∞—è —Å–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞ –±–µ–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π;'],
['–†–∞–∑–º–µ–Ω –µ—Å—Ç—å;'],
['–ó–∞–ª —É–±—Ä–∞–Ω;'],
['–¢–µ–ª–µ—Ñ–æ–Ω –Ω–∞ –∑–∞—Ä—è–¥–∫—É –ø–æ—Å—Ç–∞–≤–ª–µ–Ω;'],
['–ú–µ–Ω–∞–∂–Ω–∏—Ü—ã –Ω–∞–ø–æ–ª–Ω–µ–Ω—ã;'],
['–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π –Ω–µ –±—ã–ª–æ;'],
['–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.']]
report = []

@dp.message(Command('start', 'Start'))
async def cmd_start(msg: types.Message) -> None:
    await msg.answer(f'<b>–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name.capitalize()}</b> üëã')


@dp.message(Command('reports', 'Reports'))
async def command_vision(msg: Message, state: FSMContext):
    await msg.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –ø—Ä–æ–¥–∞–∂:', reply_markup=keyboards.inline_area_kb)
    await state.set_state(Location.choose_location)


@dp.message(Location.choose_location)
@dp.callback_query(F.data == 'poolbar_area')
async def to_poolbar(callback: CallbackQuery, state: FSMContext):
    await state.update_data(Poolbar='poolbar_area')
    await callback.answer('–í—ã–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è <–ü–£–õ–ë–ê–†>')
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ë–ï–ó–ù–ê–õ–ò–ß–ù–´–• –æ–ø–ª–∞—Ç:")
    await state.set_state(Location.nocash)


@dp.message(Location.choose_location)
@dp.callback_query(F.data == 'window_area')
async def to_poolbar(callback: CallbackQuery, state: FSMContext):
    await state.update_data(–õ–û–ö–ê–¶–ò–Ø='–ü—É–ª–±–∞—Ä')
    await callback.answer('–í—ã–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è <–û–ö–û–®–ö–û>')
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ë–ï–ó–ù–ê–õ–ò–ß–ù–´–• –æ–ø–ª–∞—Ç:")
    await state.set_state(Location.nocash)


@dp.message(Location.nocash)
async def get_no_cash(msg: Message, state: FSMContext):
    await state.update_data(–ë–ï–ó–ù–ê–õ–ò–ß–ù–´–ï=msg.text)
    user_data = await state.get_data()
    await msg.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ù–ê–õ–ò–ß–ù–´–• –æ–ø–ª–∞—Ç:')
    print(user_data)
    await state.set_state(Location.cash)


@dp.message(Location.cash)
async def set_cash(msg: Message, state: FSMContext):
    await state.update_data(–ù–ê–õ–ò–ß–ù–´–ï=msg.text)
    user_data = await state.get_data()
    print(user_data)
    await state.set_state(Location.more_report)
    # await msg.answer(f'Good! –ë—ã–ª–∏ –ª–∏ –¥—Ä—É–≥–∏–µ –ª–æ–∫–∞—Ü–∏–∏ —Å –ø—Ä–∏–±—ã–ª—å—é?', reply_markup=keyboards.yes_or_no_kb)
    await msg.answer(f'Good! –ë—ã–ª–∏ –ª–∏ –¥—Ä—É–≥–∏–µ –ª–æ–∫–∞—Ü–∏–∏ —Å –ø—Ä–∏–±—ã–ª—å—é?', reply_markup=keyboards.category_kb)


async def main():
    await dp.start_polling(bot)
    await bot.delete_webhook(drop_pending_updates=True)
    dp.include_routers(choose_loc.router)


if __name__ == '__main__':
    asyncio.run(main())

# C:\Users\HomeMachine\Desktop\ngrok.exe http 8080
# Emoji : win+.
# botID = 6373698793
# from aiogram.enums.dice_emoji import DiceEmoji  - –∫–ª–∞—Å—Å —ç–º–æ–¥–∂–∏ –∏–≥—Ä–æ–≤–∞—è –≥—Ä—É–ø–ø–∞
